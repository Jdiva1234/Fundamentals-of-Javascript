JavaScript Arrays 

const friends = ['Fave', 'Justice', 'Lisa']; 
friends.push('Dennis'); push adds to the end of the array
friends.unshift('Dennis'); unshift adds to the beginning of the array
friends.pop(); pop removes the last element of the array
friends.shift(); shift removes the first element of the array
friends.indexOf('Justice'); indexOf returns the index of the element in the array
friends.includes('Justice'); includes returns a boolean if the element is in the array


JavaScript Objects
const jonasArrays =[
    'Jonas',
    'Schmedtmann',
    2037 - 1991,
    'teacher',
    ['Michael', 'Peter', 'Steven']
]; this is an array

const jonas = {
    firstName: 'Jonas',
    lastName: 'Schmedtmann',
    age: 2037 - 1991,
    job: 'teacher',
    friends: ['Michael', 'Peter', 'Steven']
}; this is an object with keys and values, it could be of any types, and we separate them with a comma and a colon. The above example has 5 keys and values. They are also called propertise of the object.

there are many ways of writing an object, but the above is the most common way, which is called object literal syntax. During runtime, the object is created and the properties are added to it, and can be accessed using the dot notation and can be access how we want to. it doesnt have to be in order.

ways to access the object properties are:
the dot notation: jonas.lastName;
bracket notation: jonas['lastName'];

when do you use the dot notation and when do you use the bracket notation?
the dot notation is used when you know the name of the property you want to access, and the bracket notation is used when you want to compute the property name, or when the property name is stored in a variable.
the bracket notation is also used when the property name is not a valid variable name, like when it has a space in it.

undefined is returned when you try to access a property that doesnt exist in the object.

const interestedIn = prompt('What do you want to know about Jonas? Choose between firstName, lastName, age, job, and friends');
console.log(jonas[interestedIn]);

jonas.location = 'Portugal'; this is how you add a property to an object
jonas['twitter'] = '@jonasschmedtman'; this is another way to add a property to an object

Object Methods: 

const jonas = {
    firstName: 'Jonas',
    lastName: 'Schmedtmann',
    birthYear: 2037 - 1991,
    job: 'teacher',
    friends: ['Michael', 'Peter', 'Steven'],
    hasDriversLicense: true,

    calcAge: function(birthYear){
        return 2037 - birthYear;
    } this is an object method, any funtion attached to a method is called an object method.

    const calcAge = function(birthYear){
        return 2037 - birthYear;
    } this is a function
}; 

calcAge: function(){
    return 2037 - this.birthYear;
} this is how you can access the object properties inside the object method. the this keyword refers to the object that the method is attached to.

we can also create new properties inside the object using a "this" keyword. 
this.age = 2037 - this.birthYear;

Iteration: The for loop. 

for(let rep = 1; rep <= 10; rep++){
    console.log(`Lifting weights repetition ${rep}`);
} this is a for loop that runs 10 times.

continue and break statements:
continue and break statements are used to terminate the loop or skip the current iteration and move to the next one.
for(let rep = 1; rep <= 10; rep++){
    console.log(`Lifting weights repetition ${rep}`);
    if(rep === 3){
        console.log('You are doing great, keep going!');
        continue;
    }
    if(rep === 5){
        console.log('You are doing great, keep going!');
        break;
    }
} the continue statement will skip the current iteration and move to the next one, while the break statement will terminate the loop.

Looping Arrays, Breaking and Continuing:

const jonas = [
    'Jonas',
    'Schmedtmann',
    2037 - 1991,
    'teacher',
    ['Michael', 'Peter', 'Steven'],
    true
];
for(let i = jonas.length-1; i >= 0; i--){
    console.log(jonas[i]);
} this is how you loop through an array using a for loop.

looping inside a loop 
for(let exercise = 1; exercise < 4; exercise++){
    console.log(`Starting exercise ${exercise}`);
    for(let rep = 1; rep < 6; rep++){
        console.log(`Lifting weights repetition ${rep} 🏋🏼‍♂️`);
    }
} this is how you loop inside a loop.

creating a while loop

let rep = 1;
while(rep <= 10){
    console.log(`Lifting weights repetition ${rep}`);
    rep++;
} this is how you create a while loop.


4 steps to solve any problems in programming: 
1. Understand the problem: by ask the right questions 
2. Break up the problem into smaller sub-problems: divide and conquer 
3. dont be afraid to do research: research helps you understand the problem better: Google, MDN, StackOverflow, etc. 
4. write some some pseudo code: write down the steps you will take to solve the problem.

Keep practicing and you will get better at it.

Coding Challenge #4
// problem:
we work for a company building a smart home thermometer. Our most recent task is this: "Given an array of temperatures of one day, calculate the temperature amplitude. Keep in mind that sometimes there might be a sensor error."
const temperatures = [3, -2, -6, -1, 'error', 9, 13, 17, 15, 14, 9, 5];
1. Understanding the problem: what is temperature amplitude? Answer: difference between the highest and the lowest temperature.
how to compute the max and min temperatures? Answer: use the max and min functions.
what is a sensor error? and what to do when there is a sensor error? Answer: ignore the sensor error.
2. Breaking up the problem into sub-problems:
- how to ignore errors?
- find the max value in the temperature array
- find the min value in the temperature array
- subtract min from max (amplitude) and return it.
const calcTempAmplitude = function(temps){
    let max = temps[0];
    let min = temps[0];
    for(let i = 0; i < temps.length; i++){
        const curTemp = temps[i];
        if(typeof curTemp !== 'number') continue;
        if(curTemp > max) max = curTemp;
        if(curTemp < min) min = curTemp;
    }
    console.log(max, min);
    return max - min;
}; 
3. Pseudo code:

The Debbuging Process:
- understand the problem
- identify the bug;  become aware of the  bug. 
- find the bug; isolatin where exactly the bug is happening in the code.
- fix the bug;correct the bug
- Prevent: test the code to see if the bug is fixed.


Coding Challenge #5
// problem:
Given an array of forecasted maximum temperatures, the thermometer displays a string with the given temperatures. Example: [17, 21, 23] will be printed as "... 17°C in 1 days ... 21°C in 2 days ... 23°C in 3 days ..."
Create a function 'printForecast' which takes in an array 'arr' and logs a string like the above to the console. Use the problem-solving framework: Understand the problem and break it up into sub-problems!


const printForecast = function(arr){
    let str = '';
    for(let i = 0; i < arr.length; i++){
        str += `${arr[i]}°C in ${i + 1} days ... `;
    }
    console.log('...' + str);
};